import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;

import java.util.*;
import java.util.stream.Collectors;

class Emp {
    int age;
    String mNumber;
    String depName;

    // Constructor, getters, setters
}

class EmployeeDTO {
    String name;
    int age;
    String mNumber;
    String depName;

    // Constructor, getters, setters
}

@FunctionalInterface
interface EmployeeMatcher {
    boolean matches(Emp emp, EmployeeDTO dto);
}

public class EmployeeMapper {

    public static BiMap<Long, String> buildBidirectionalMap(
            Map<String, Long> nameToEmpID,
            Map<Long, Emp> empMap,
            List<EmployeeDTO> employeeDTOList,
            EmployeeMatcher matcher) {

        // Map name to DTO for quick lookup
        Map<String, EmployeeDTO> nameToDTO = employeeDTOList.stream()
                .collect(Collectors.toMap(dto -> dto.name, dto -> dto));

        // Group names by employee ID
        Map<Long, Set<String>> empIdToNames = new HashMap<>();
        for (Map.Entry<String, Long> entry : nameToEmpID.entrySet()) {
            empIdToNames
                .computeIfAbsent(entry.getValue(), k -> new HashSet<>())
                .add(entry.getKey());
        }

        // Create a BiMap for bidirectional lookup
        BiMap<Long, String> biMap = HashBiMap.create();

        for (Map.Entry<Long, Set<String>> entry : empIdToNames.entrySet()) {
            Long empId = entry.getKey();
            Emp emp = empMap.get(empId);

            for (String name : entry.getValue()) {
                EmployeeDTO dto = nameToDTO.get(name);
                if (dto != null && matcher.matches(emp, dto)) {
                    biMap.put(empId, name);
                    break; // Stop after first match
                }
            }
        }

        return biMap;
    }
}
==============================
public class DefaultEmployeeMatcher implements EmployeeMatcher {
    @Override
    public boolean matches(Emp emp, EmployeeDTO dto) {
        return emp.age == dto.age &&
               emp.mNumber.equals(dto.mNumber) &&
               emp.depName.equals(dto.depName);
    }
}
====================
Use It like this:-
EmployeeMatcher matcher = new DefaultEmployeeMatcher();
BiMap<Long, String> biMap = EmployeeMapper.buildBidirectionalMap(
    nameToEmpID, empMap, employeeDTOList, matcher);
