import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;

import java.util.*;
import java.util.stream.Collectors;

class Emp {
    int age;
    String mNumber;
    String depName;

    // Constructor, getters, setters
}

class EmployeeDTO {
    String name;
    int age;
    String mNumber;
    String depName;

    // Constructor, getters, setters
}

@FunctionalInterface
interface EmployeeMatcher {
    boolean matches(Emp emp, EmployeeDTO dto);
}

public class EmployeeMapper {

    public static Map<Long, Emp> filterEmpMapByDTOs(
        Map<Long, Emp> empMap,
        Map<String, Long> nameToEmpID,
        List<EmployeeDTO> employeeDTOList,
        EmployeeMatcher matcher) {

    // Map name to DTO for quick lookup
    Map<String, EmployeeDTO> nameToDTO = employeeDTOList.stream()
            .collect(Collectors.toMap(dto -> dto.name, dto -> dto));

    // Group names by employee ID
    Map<Long, Set<String>> empIdToNames = new HashMap<>();
    for (Map.Entry<String, Long> entry : nameToEmpID.entrySet()) {
        empIdToNames
            .computeIfAbsent(entry.getValue(), k -> new HashSet<>())
            .add(entry.getKey());
    }

    // Filtered empMap to return
    Map<Long, Emp> filteredEmpMap = new HashMap<>();

    for (Map.Entry<Long, Set<String>> entry : empIdToNames.entrySet()) {
        Long empId = entry.getKey();
        Emp emp = empMap.get(empId);

        for (String name : entry.getValue()) {
            EmployeeDTO dto = nameToDTO.get(name);
            if (dto != null && matcher.matches(emp, dto)) {
                filteredEmpMap.put(empId, emp);
                break; // Stop after first match
            }
        }
    }

    return filteredEmpMap;
}

}
==============================
public class DefaultEmployeeMatcher implements EmployeeMatcher {
    @Override
    public boolean matches(Emp emp, EmployeeDTO dto) {
        return emp.age == dto.age &&
               emp.mNumber.equals(dto.mNumber) &&
               emp.depName.equals(dto.depName);
    }
}
====================
Use It like this:-
EmployeeMatcher matcher = new DefaultEmployeeMatcher();
BiMap<Long, String> biMap = EmployeeMapper.buildBidirectionalMap(
    nameToEmpID, empMap, employeeDTOList, matcher);
