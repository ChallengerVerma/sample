Consumer<Emitter<byte[]>> consumer = emitter -> {
    // Custom emitter logic
};
ByteArrayEmitter emitter = new ByteArrayEmitter(
    bytes -> {
        // custom onNext handling logic
    },
    throwable -> {
        // custom onError handling logic
    },
    () -> {
        // custom onComplete handling logic
    }
);
consumer.accept(emitter);
I hope this helps!     


import java.util.function.Consumer;

public class ByteArrayEmitter implements Emitter<byte[]> {
    private final Consumer<byte[]> onNext;
    private final Consumer<Throwable> onError;
    private final Runnable onComplete;

    public ByteArrayEmitter(Consumer<byte[]> onNext, Consumer<Throwable> onError, Runnable onComplete) {
        this.onNext = onNext;
        this.onError = onError;
        this.onComplete = onComplete;
    }

    @Override
    public void onNext(byte[] bytes) {
        onNext.accept(bytes);
    }

    @Override
    public void onError(Throwable e) {
        onError.accept(e);
    }

    @Override
    public void onComplete() {
        onComplete.run();
    }

    @Override
    public void setCancellation(Cancellable c) {
        // Custom setCancellation implementation
        // This method is called when the emitter is cancelled
    }

    @Override
    public long requested() {
        // Custom requested implementation
        // This method is called to get the current requested amount
        return 0; // Replace with your custom implementation
    }

    @Override
    public boolean isCancelled() {
        // Custom isCancelled implementation
        // This method is called to check if the emitter is cancelled
        return false; // Replace with your custom implementation
    }
}
