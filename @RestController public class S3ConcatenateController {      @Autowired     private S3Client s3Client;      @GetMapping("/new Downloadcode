import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.s3.transfer.TransferManager;
import com.amazonaws.services.s3.transfer.TransferManagerBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@Controller
@RequestMapping("/api")
public class FileController {

    @Autowired
    private AmazonS3 s3Client;

    @Value("${s3.bucket.name}")
    private String bucketName;

    @GetMapping("/download/{filename}")
    public ResponseEntity<InputStreamResource> downloadFile(@PathVariable String filename) {
        try {
            S3Object s3Object = s3Client.getObject(new GetObjectRequest(bucketName, filename));

            ByteBuffer buffer = ByteBuffer.allocate(1024 * 1024);

            InputStreamResource inputStreamResource = new InputStreamResource(s3Object.getObjectContent());
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            byte[] bytes = new byte[1024 * 1024];
            int read;
            while ((read = inputStreamResource.getInputStream().read(bytes)) != -1) {
                buffer.put(bytes, 0, read);
                if (!buffer.hasRemaining()) {
                    buffer.flip();
                    out.write(buffer.array(), 0, buffer.limit());
                    buffer.clear();
                }
            }
            if (buffer.position() > 0) {
                buffer.flip();
                out.write(buffer.array(), 0, buffer.limit());
            }

            byte[] allBytes = out.toByteArray();
            inputStreamResource.getInputStream().close();
            out.close();
            s3Object.close();

            InputStreamResource isr = new InputStreamResource(new ByteArrayInputStream(allBytes));
            return new ResponseEntity<>(isr, HttpStatus.OK);
        } catch (IOException e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
