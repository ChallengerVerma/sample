aws cloudwatch get-metric-data --metric-data-queries '[{"Id":"myMetricQuery","MetricStat":{"Metric":{"Namespace":"MyNamespace","MetricName":"MyMetric","Dimensions":[{"Name":"Environment","Value":"Production"},{"Name":"InstanceId","Value":"i-1234567890abcdef0"}]},"Period":60,"Stat":"Average"}}]' --start-time 2023-11-05T00:00:00Z --end-time 2023-11-05T01:00:00Z

List all the metrics in cloudwatch metric:-

CLI cpmmand:-- aws cloudwatch list-metrics --namespace "MyNamespace" --metric-name "MyMetric" --dimensions Name=Environment,Value=Production

Java Code:-
import software.amazon.awssdk.services.cloudwatch.CloudWatchClient;
import software.amazon.awssdk.services.cloudwatch.model.ListMetricsRequest;
import software.amazon.awssdk.services.cloudwatch.model.ListMetricsResponse;
import software.amazon.awssdk.services.cloudwatch.model.Metric;

public class CloudWatchMetricsSearch {
    private static final CloudWatchClient cloudWatch = CloudWatchClient.builder()
            .region(Region.US_EAST_1)
            .build();

    public static void main(String[] args) {
        ListMetricsRequest request = ListMetricsRequest.builder()
                .namespace("MyNamespace")
                .metricName("MyMetric")
                .dimensions(Dimension.builder().name("Environment").value("Production").build())
                .build();

        ListMetricsResponse response = cloudWatch.listMetrics(request);

        for (Metric metric : response.metrics()) {
            System.out.println("Metric Name: " + metric.metricName());
            metric.dimensions().forEach(dimension -> {
                System.out.println("Dimension Name: " + dimension.name() + ", Value: " + dimension.value());
            });
        }
    }
}

import software.amazon.awssdk.services.cloudwatch.model.Dimension;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

public class DimensionConverter {

    public static MetricDimensions convertDimensions(List<Dimension> dimensions) {
        Map<String, String> dimensionMap = dimensions.stream()
                .collect(Collectors.toMap(Dimension::name, Dimension::value));

        return new MetricDimensions.Builder()
                .environment(Optional.ofNullable(dimensionMap.get("Environment")).orElse("Unknown"))
                .instanceId(Optional.ofNullable(dimensionMap.get("InstanceId")).orElse("Unknown"))
                .build();
    }

    public static void main(String[] args) {
        Dimension environmentDimension = Dimension.builder()
                .name("Environment")
                .value("Production")
                .build();

        Dimension instanceDimension = Dimension.builder()
                .name("InstanceId")
                .value("i-1234567890abcdef0")
                .build();

        List<Dimension> dimensions = List.of(environmentDimension, instanceDimension);

        MetricDimensions metricDimensions = convertDimensions(dimensions);

        System.out.println(metricDimensions);
    }
}


